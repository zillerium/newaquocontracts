{
	"compiler": {
		"version": "0.7.6+commit.7338295f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "contractId",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "tokenContract",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "hashlock",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timelock",
						"type": "uint256"
					}
				],
				"name": "HTLCERC20New",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "contractId",
						"type": "bytes32"
					}
				],
				"name": "HTLCERC20Refund",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "contractId",
						"type": "bytes32"
					}
				],
				"name": "HTLCERC20Withdraw",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_contractId",
						"type": "bytes32"
					}
				],
				"name": "getContract",
				"outputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenContract",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "hashlock",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "timelock",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "withdrawn",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "refunded",
						"type": "bool"
					},
					{
						"internalType": "bytes32",
						"name": "preimage",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_receiver",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "_hashlock",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "_timelock",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_tokenContract",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "newContract",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "contractId",
						"type": "bytes32"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_contractId",
						"type": "bytes32"
					}
				],
				"name": "refund",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_contractId",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_preimage",
						"type": "bytes32"
					}
				],
				"name": "withdraw",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"newContract(address,bytes32,uint256,address,uint256)": {
					"details": "Sender / Payer sets up a new hash time lock contract depositing the funds and providing the reciever and terms. NOTE: _receiver must first call approve() on the token contract.       See allowance check in tokensTransferable modifier.",
					"params": {
						"_amount": "Amount of the token to lock up.",
						"_hashlock": "A sha-2 sha256 hash hashlock.",
						"_receiver": "Receiver of the tokens.",
						"_timelock": "UNIX epoch seconds time that the lock expires at.                  Refunds can be made after this time.",
						"_tokenContract": "ERC20 Token contract address."
					},
					"returns": {
						"contractId": "Id of the new HTLC. This is needed for subsequent                    calls."
					}
				},
				"refund(bytes32)": {
					"details": "Called by the sender if there was no withdraw AND the time lock has expired. This will restore ownership of the tokens to the sender.",
					"params": {
						"_contractId": "Id of HTLC to refund from."
					},
					"returns": {
						"_0": "bool true on success"
					}
				},
				"withdraw(bytes32,bytes32)": {
					"details": "Called by the receiver once they know the preimage of the hashlock. This will transfer ownership of the locked tokens to their address.",
					"params": {
						"_contractId": "Id of the HTLC.",
						"_preimage": "sha256(_preimage) should equal the contract hashlock."
					},
					"returns": {
						"_0": "bool true on success"
					}
				}
			},
			"title": "Hashed Timelock Contracts (HTLCs) on Ethereum ERC20 tokens. This contract provides a way to create and keep HTLCs for ERC20 tokens. See HashedTimelock.sol for a contract that provides the same functions for the native ETH token. Protocol:  1) newContract(receiver, hashlock, timelock, tokenContract, amount) - a      sender calls this to create a new HTLC on a given token (tokenContract)       for a given amount. A 32 byte contract id is returned  2) withdraw(contractId, preimage) - once the receiver knows the preimage of      the hashlock hash they can claim the tokens with this function  3) refund() - after timelock has expired and if the receiver did not      withdraw the tokens the sender / creator of the HTLC can get their tokens      back with this function.",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/erc20htlc.sol": "HashedTimelockERC20"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/erc20htlc.sol": {
			"keccak256": "0x13a23a6d85a66faf30d0e3525f388a940da763b90c25a50cf020287aa469c550",
			"urls": [
				"bzz-raw://d6ad548d68bb5bbddbc71c2c55b7ba9ef8d9b4d98e09a957be70e8ff73e78978",
				"dweb:/ipfs/QmRdmFnf8tnrf2M7aXi6pgJ6aF5EkxVs3HTQCN8GBKupqo"
			]
		},
		"openzeppelin-solidity/contracts/math/SafeMath.sol": {
			"keccak256": "0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52",
			"license": "MIT",
			"urls": [
				"bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c",
				"dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR"
			]
		},
		"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3",
			"license": "MIT",
			"urls": [
				"bzz-raw://991b44ff44e0496e8554a90f4c0512c28faed45104d40430019f3c67ea67740e",
				"dweb:/ipfs/Qmc3nRapVbcctELoZS5qe17zLkFB3bETBfwzCTMF1CSuGE"
			]
		},
		"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5",
			"license": "MIT",
			"urls": [
				"bzz-raw://24427744bd3e6cb73c17010119af12a318289c0253a4d9acb8576c9fb3797b08",
				"dweb:/ipfs/QmTLDqpKRBuxGxRAmjgXt9AkXyACW3MtKzi7PYjm5iMfGC"
			]
		},
		"openzeppelin-solidity/contracts/utils/Context.sol": {
			"keccak256": "0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0",
			"license": "MIT",
			"urls": [
				"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f",
				"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96"
			]
		}
	},
	"version": 1
}