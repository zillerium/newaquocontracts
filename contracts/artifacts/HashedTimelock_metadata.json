{
	"compiler": {
		"version": "0.5.17+commit.d19bba13"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "contractId",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "hashlock",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timelock",
						"type": "uint256"
					}
				],
				"name": "LogHTLCNew",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "contractId",
						"type": "bytes32"
					}
				],
				"name": "LogHTLCRefund",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "contractId",
						"type": "bytes32"
					}
				],
				"name": "LogHTLCWithdraw",
				"type": "event"
			},
			{
				"constant": true,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_contractId",
						"type": "bytes32"
					}
				],
				"name": "getContract",
				"outputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "hashlock",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "timelock",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "withdrawn",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "refunded",
						"type": "bool"
					},
					{
						"internalType": "bytes32",
						"name": "preimage",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "address payable",
						"name": "_receiver",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "_hashlock",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "_timelock",
						"type": "uint256"
					}
				],
				"name": "newContract",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "contractId",
						"type": "bytes32"
					}
				],
				"payable": true,
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_contractId",
						"type": "bytes32"
					}
				],
				"name": "refund",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_contractId",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_preimage",
						"type": "bytes32"
					}
				],
				"name": "withdraw",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"methods": {
				"getContract(bytes32)": {
					"details": "Get contract details.",
					"params": {
						"_contractId": "HTLC contract id"
					},
					"return": "All parameters in struct LockContract for _contractId HTLC"
				},
				"newContract(address,bytes32,uint256)": {
					"details": "Sender sets up a new hash time lock contract depositing the ETH and providing the reciever lock terms. ",
					"params": {
						"_hashlock": "A sha-2 sha256 hash hashlock.",
						"_receiver": "Receiver of the ETH.",
						"_timelock": "UNIX epoch seconds time that the lock expires at.                 Refunds can be made after this time."
					},
					"return": "contractId Id of the new HTLC. This is needed for subsequent                   calls."
				},
				"refund(bytes32)": {
					"details": "Called by the sender if there was no withdraw AND the time lock has expired. This will refund the contract amount. ",
					"params": {
						"_contractId": "Id of HTLC to refund from."
					},
					"return": "bool true on success"
				},
				"withdraw(bytes32,bytes32)": {
					"details": "Called by the receiver once they know the preimage of the hashlock. This will transfer the locked funds to their address. ",
					"params": {
						"_contractId": "Id of the HTLC.",
						"_preimage": "sha256(_preimage) should equal the contract hashlock."
					},
					"return": "bool true on success"
				}
			},
			"title": "Hashed Timelock Contracts (HTLCs) on Ethereum ETH.  * This contract provides a way to create and keep HTLCs for ETH.  * See HashedTimelockERC20.sol for a contract that provides the same functions for ERC20 tokens.  * Protocol:  *  1) newContract(receiver, hashlock, timelock) - a sender calls this to create     a new HTLC and gets back a 32 byte contract id 2) withdraw(contractId, preimage) - once the receiver knows the preimage of     the hashlock hash they can claim the ETH with this function 3) refund() - after timelock has expired and if the receiver did not     withdraw funds the sender / creator of the HTLC can get their ETH     back with this function."
		},
		"userdoc": {
			"methods": {}
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/htlc.sol": "HashedTimelock"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/htlc.sol": {
			"keccak256": "0x4b1b429a3bd50d796ff10aa6c348cd93108e0699d75437451847b402bb4f33bb",
			"urls": [
				"bzz-raw://6c3eea883d107f2bce8e4c1a6affe7cce5ca6e70e6cd7fbe09047e282f27fa0c",
				"dweb:/ipfs/QmNZhiAMxPy9MfeJw1hGpRsNpgyLRu1MTSS6CfNSCpcdZx"
			]
		}
	},
	"version": 1
}